EightTrack gate sequencer

buttons:
    use mechanical buttons? -> discard?
    test capacitive buttons on a print? -> Tdone
    test close switch on a print (debouncing!) -> TODO
    ? use capacitive 12 channel?
    MPR121 for function buttons -> done : track x8 + set clear mute learn

invert/rotate pattern display row -> done

ToggleState -> TODO
midi serial out -> done

filter channel midi handler -> done
    midi mult CV: midi thru for unhandled channels [4,16] -> done

midi chord memory (hold) (midi handler) -> todo
midi gated / chopped (midi handler) -> todo

MCP4822 1V/Oct out (+ digital out for gate) -> todo
    MCP48xx VoltageOut (SPI, 5V, internal reference!, range [0V - 4.096V]) -> todo 

MCP4725 1V/Oct out (+digital out for gate) (no velocity) -> TODO
    MCP4725 VoltageOut (I2C, 3V3 or 5V, external reference! => range [0V - 3V3 or 5V]) -> todo

play mode vs step mode -> TODO
    play/stop(step) mode toggle 
        - ???? note off ????
        - (un)mute all ??

learn note pot -> done

change midi channel
    - common: function button + pot? -> TODO
    - per track (?) -> function toggle button + led, exclusive with learn midi note mode, press track + pot (cfr midi note learn)

tempo button? external clock? -> TODO
    reset / period to clock gate state

step record quantize independent of clock duty cycle

save to / load from flash : 
    header: app, length, version, ... -> TODO 
    8x track: midi note, channel, gate length -> TODO
    pattern: 8 x track pattern 
    track pattern: 32 x steps, length -> TODO
    8x bank: 8x patterns -> TODO

save to / load from midi sysex -> TODO 
    save to midi sysex btn?
    midi in support
    ???? use midi cc for other commands??? (gate length, ...)
    format cfr flash

save to / load from debug serial -> TODO
    save / dump : btn?
    load / import : always read??????
    format cfr flash
        dump as hex??
        dump as text??

Track functions:
    track: set step
    track: clear step
    track: toggle mute
    track: toggle learn midi note + pot upon track btn rising
    track: toggle learn midi channel + pot upon track btn rising
        toggle learn mode btn + 2 leds (learn midi note / learn midi channel)
    'all tracks' button (for any function)

Play functions
    toggle play/step mode
    reset (play mode) / advance (step mode)
        separate reset btn (?)
    ? play quantize toggle (per track?) (play mode) (indicator??)

Edit track functions
    track : pattern fill all / erase all
    track : pattern rotate left/right (offset)
    track : pattern invert 
    track : gate length up/down (?)
        + pot upon track btn rising (???)
    track : clock divider up/down (?)
    track : (play) length up/down (?)
        per track???

pattern bank functions
    switch pattern [1-8]
        switch takes effect when next pattern starts (play mode)
    switch bank [1-8]
        switch takes effect when next pattern starts (play mode)

Euclidian mode (toggle?)
    track: pattern length up/down
    track: pattern fills up/down
    track: offset up/down

select pattern 1-8 (?)
    function button + track buttons to switch to pattern 1-8, switch bank 1-8
    TODO naming: track , (track) pattern, part
    track = pattern of 32 steps, part = 8 tracks, 
    ????? step = on/off, track = 32 steps, pattern = 8 tracks, bank = 8 patterns

song concept? 
    record / play ?
    play patterns in order (?), 
        7 tracks + pattern 'track' -> ?????

pattern display: 
    ? invert current step -> discard
    set current step to off when clock is high -> done
    ? invert current step when clock is high -> discard
    display updated from track controller -> done
    no change when muted

log midi handler: 
    use hard coded string, overwrite bytes, use write not printf -> no measurable improvement (?) -> discard
    idem debug log??

MPR121 DigitalInputBank (read(), Get(int idx), Size()) -> done

digital out matrix 
    interface set(row, col)  update/write() -> done
    impl: max7219, invert rows/cols if needed, uint8[8] per display, use bitwise -> done

Bitwise ~ template (uint32_t , uint8_t, ...) -> done

